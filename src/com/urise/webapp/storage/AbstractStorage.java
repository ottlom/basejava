package com.urise.webapp.storage;import com.urise.webapp.exception.ExistStorageException;import com.urise.webapp.exception.NotExistStorageException;import com.urise.webapp.model.Resume;import java.util.Comparator;import java.util.List;import java.util.logging.Logger;public abstract class AbstractStorage<SearchKey> implements Storage {    private static final Logger LOG = Logger.getLogger(AbstractStorage.class.getName());    protected abstract List<Resume> getCopyStorage();    protected abstract SearchKey getSearchKey(String uuid);    protected abstract boolean isExist(SearchKey searchKey);    protected abstract void doSave(SearchKey searchKey, Resume resume);    protected abstract void doDelete(SearchKey searchKey);    protected abstract void doUpdate(SearchKey searchKey, Resume resume);    protected abstract Resume doGet(SearchKey searchKey);    @Override    public void save(Resume r) {        LOG.info("Save " + r);        doSave(getNotExistingSearchKey(r.getUuid()), r);    }    @Override    public void delete(String uuid) {        LOG.info("Delete " + uuid);        doDelete(getExistingSearchKey(uuid));    }    @Override    public void update(Resume r) {        LOG.info("Update " + r);        doUpdate(getExistingSearchKey(r.getUuid()), r);    }    @Override    public Resume get(String uuid) {        LOG.info("Get " + uuid);        return doGet(getExistingSearchKey(uuid));    }    private SearchKey getExistingSearchKey(String uuid) {        SearchKey searchKey = getSearchKey(uuid);        if (!isExist(searchKey)) {            LOG.warning("Resume " + uuid + " not exist");            throw new NotExistStorageException(uuid);        } else {            return searchKey;        }    }    private SearchKey getNotExistingSearchKey(String uuid) {        SearchKey searchKey = getSearchKey(uuid);        if (isExist(searchKey)) {            LOG.warning("Resume " + uuid + " already exist");            throw new ExistStorageException(uuid);        }        return searchKey;    }    //comparator    public static final Comparator<Resume> COMPARATOR = new Comparator<Resume>() {        @Override        public int compare(Resume o1, Resume o2) {            if (o1.getFullName().equals(o2.getFullName())) {                return o1.getUuid().compareTo(o2.getUuid());            } else return o1.getFullName().compareTo(o2.getFullName());        }    };    @Override    public List<Resume> getAllSorted() {        List<Resume> returnAllResume = getCopyStorage();        returnAllResume.sort(COMPARATOR);        return returnAllResume;    }}